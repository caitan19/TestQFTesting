<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE RootStep>
<RootStep id="_0" indentation="0" linelength="160" name="root" signature="D1ABF47CEA874002D65C2F115A5073A4C94FB1D6" version="7.1.3">
<include>qfs.qft</include>
<reference>qfs.qft</reference>
<TestSet id="_1" name="unnamed">
<TestCase id="_2" name="unnamed"/>
</TestSet>
<PackageRoot id="_3"/>
<ExtraSequence id="_4">
<SetupSequence id="_6" name="Launch www.qf-test.com">
<BasicSequence id="_7" name="Set global variables">
<SetGlobalStep id="_8" varname="client">
<default>www.qf-test.com</default>
</SetGlobalStep>
<SetGlobalStep id="_9" varname="browser">
<default>chrome</default>
</SetGlobalStep>
<SetGlobalStep id="_A" varname="browserdir"/>
</BasicSequence>
<ClientWaiter client="$(client)" engine="web" id="_B" local="true" raise="false" resvarname="isSUTRunning" timeout="0">
<comment>This node checks whether the SUT is already running. The result of this check will be stored in the variable isSUTRunning. The variable itself can contain true if SUT is already running or false if SUT is not running. This variable will be used in the following 'If' node.</comment>
</ClientWaiter>
<IfSequence id="_C" name="Launch SUT if not running" test="not $(isSUTRunning)">
<BasicSequence id="_D" name="Start web engine">
<BrowserClientStarter browser="$(browser)" client="$(client)" executable="${qftest:java}" id="_E" mozhome="$(browserdir)" openwindow="false"/>
<ClientWaiter client="$(client)" engine="web" id="_F"/>
</BasicSequence>
<BasicSequence id="_G" name="Perform browser settings">
<ProcedureCall id="_H" procedure="qfs.qft#qfs.web.browser.settings.doStartupSettings">
<variable name="client">$(client)</variable>
<variable name="browser">$(browser)</variable>
<variable name="mozhome">$(browserdir)</variable>
<variable name="emptyCache">true</variable>
<variable name="enableCookies">true</variable>
<variable name="deleteCookies">true</variable>
<variable name="locale">en</variable>
<variable name="enableProxy">false</variable>
<variable name="proxyAddress"/>
<variable name="proxyPort"/>
<variable name="proxyAutoconfigurl"/>
<variable name="enableProxyBypass">false</variable>
<variable name="proxyBypass"/>
<variable name="mozprofile"/>
<variable name="compatibilitymode">no</variable>
</ProcedureCall>
</BasicSequence>
<BasicSequence id="_I" name="Open browser window">
<BrowserClientStarter browser="${default:browser:chrome}" client="$(client)" executable="${qftest:java}" id="_J" openwindow="true"
                      url="http://www.qf-test.com/"/>
<DocumentWaiter client="$(client)" component="genericDocument" id="_K" timeout="60000"/>
</BasicSequence>
<BasicSequence id="_L" name="Configure CustomWebResolver">
<InstallCWRStep client="$(client)" engine="web" id="_M">
<code>base: autodetect

# Map DOM Nodes to Generic Classes
# by CSS class, HTML attribute or HTML tag
# 
# Put the cursor next to "genericClasses" and
# click the gutter icon to create a new mapping.
genericClasses:

# Generic Class Names or HTML tags for which to ignore nodes
# when creating the parent hierarchy of a node
ignoreTags:
- &lt;DIV&gt;
- &lt;SPAN&gt;
</code>
<comment>A CustomWebResolver allows you to translate the specifics of your web application's components into generic classes understood by QF-Test.
This greatly improves component recognition and allows for more specific check types.

The most important category is "genericClasses". Here, you can map HTML elements to generic classes by their HTML tag, CSS classes or HTML attributes.

For additional information and examples, use "What's this?" in the step's context menu entry.</comment>
</InstallCWRStep>
</BasicSequence>
</IfSequence>
</SetupSequence>
</ExtraSequence>
<WindowList id="_5"/>
</RootStep>
